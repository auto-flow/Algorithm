//Example 3
#include <iostream>

using namespace std;

int n = 666;

void fn();

void fn() {
    cout << n << endl;
    static int n = 10;
    cout << n << endl;
    cout << n << endl;
    n++;
}

int main() {

    fn(); //10
    fn(); //11
    fn(); //12
}


// 通常，在函数体内定义了一个变量，每当程序运行到该语句时都会给该局部变量分配栈内存。
// 但随着程序退出函数体，系统就会收回栈内存，局部变量也相应失效。

// 但有时候我们需要在两次调用之间对变量的值进行保存。
// 通常的想法是定义一个全局变量来实现。但这样一来，变量已经不再属于函数本身了，不再仅受函数的控制，这给程序的维护带来不便。

// 【静态局部变量】在【全局数据区】分配内存；
// 【静态局部变量】在程序执行到该对象的【声明】处时被【首次】初始化，即以后的函数调用不再进行初始化；
// 【静态局部变量】一般在声明处初始化，如果没有显式初始化，会被程序自动初始化为0；
// 【静态局部变量】始终驻留在【全局数据区】，直到程序运行结束。但其【作用域为局部作用域】，当定义它的函数或语句块结束时，其作用域随之结束；
